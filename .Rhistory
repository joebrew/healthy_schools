text(bp[,1],
y = num,
pos = ifelse(num > 0,1,3),
labels= num)
abline(h=0)
}
par(mfrow=c(5,1))
par(mar=c(4,4,1,1))
for (i in days){
PlotFun(i)
}
########
conception <- as.Date("2014-08-14", format = "%Y-%m-%d")
regla <- as.Date("2014-08-14", format = "%Y-%m-%d")
due <- as.Date("2015-05-21", format = "%Y-%m-%d")
conception <- as.Date("2014-08-28", format = "%Y-%m-%d")
due - regla
due - regla / 7
as.numeric(due - regla) / 7
as.numeric(due - conception) / 7
p <- read.csv("C:/Users/BrewJR/Desktop/pregnancy_calendar.csv")
head(p)
p$date <- as.Date(p$Start.Date, format = "%m/%d/%Y")
head(p)
10/7
10 %/% 7
13 %/% 7
14 %/% 7
p$days <-
as.numeric(p$date - p$date[1])
head(p)
p$weeks <-
7 %/% p$days
head(p)
p$weeks <-
p$days %/% 7
head(p)
20 %% 7
p$edays <-
p$days %% 7
head(p)
head(p, nrows=20)
head(p, nrow=20)
head(p, rows=20)
View(p)
p$Subject <- paste0(
p$weeks,
" weeks and ",
p$edays,
" days"
)
head(p)
p$Subject
as.data.frame(p$Subject)
View(p)
280/3
write.csv(p, "C:/Users/BrewJR/Desktop/pCal.csv")
2+2
plot(1:10, (1:10^2))
plot(1:10, (1:10)^2)
plot(1:10, (1:10)^2, type = "l")
plot(sqrt(1:100), 200:299, pch=16, col = adjustcolor("darkgreen", alpha.f=0.6))
plot(sqrt(1:100), 200:299, pch=16, col = adjustcolor("darkgreen", alpha.f=0.6), cex = seq(0,3, length = 100))
plot(sqrt(1:100), 200:299, pch=16, col = adjustcolor("darkgreen", alpha.f=0.6), cex = seq(0,5, length = 100))
barplot(1:10)
barplot(1:10, main = "yo")
barplot(1:10, main = "yo", col = "red")
barplot(1:10, main = "yo", col = "red", border = "green")
barplot(1:10, main = "yo", col = "red", border = FALSE)
barplot(1:10, main = "yo", col = "red", border = FALSE, xlab = "These are bars")
barplot(1:10, main = "yo", col = "red", border = FALSE, xlab = "These are bars", ylab = "These are numbers")
barplot(1:10, main = "yo", col = c("red", "blue"), border = FALSE, xlab = "These are bars", ylab = "These are numbers")
barplot(1:10, main = "yo", col = c("red", "blue", "green"), border = FALSE, xlab = "These are bars", ylab = "These are numbers")
mycolors <- "red"
barplot(1:5, col = mycolors)
mycolors <- c("red", "red", "red", "green", "red")
barplot(1:5, col = mycolors)
mycolors <- c("red", "blue")
barplot(1:5, col = mycolors)
plot(1:10, 1:10, pch=15)
people <- c("joe", "jon", "frank", "leslie", "pat", "cat", "dan", "sue", "juan")
age <- c(30, 20, 15, 100, 87, 93, 41, 19 26)
age <- c(30, 20, 15, 100, 87, 93, 41, 19 26)
age <- c(30, 20, 15, 100, 87, 93, 41, 19, 26)
money <- c(60, 40, 20 ,81, 72, 135, 50, 35, 6)
data.frame(people, age, money)
remove.packages("dplyr")
install.packages("dplyr")
#####
#  WRITE A FUNCTION TO ENCAPTURE DENVER COSTS
#####
denver <- function (admin= 24.69,
laiv_vax = 17.50,
tiv_vax = 11.17,
vfc_vax = 0,
priv_reim_vax = 20,
priv_reim_admin = 12,
vfc_reim_admin = 6.50,
vrc_reim_vax = 0,
vfc = 4827,
private = 1023,
priv_percent_laiv = 92.86694,
vfc_percent_laiv = 92.86694){
# how much does medicaid cost
medicaid_cost <- vfc * (vfc_vax + admin)
# how much does private cost
private_laiv_cost <- (laiv_vax + admin) *(priv_percent_laiv*.01) * private
private_tiv_cost <- (tiv_vax + admin) * (1- (priv_percent_laiv *.01)) *private
private_cost <- private_laiv_cost + private_tiv_cost
#how much does medicaid make
medicaid_rev <- (vfc_reim_admin + vfc_vax) * vfc
#how much does private make
private_rev <- ( priv_reim_admin + priv_reim_vax ) * private
# What's the total revenue / loss
total <- medicaid_rev + private_rev - medicaid_cost - private_cost
# return
total
}
denver()
denver(private = 50, vfc = 50)
denver(private = 25, vfc = 75)
denver(private = 75, vfc = 25)
denver(private = 100, vfc = 0)
denver <- function (admin= 24.69,
laiv_vax = 17.50,
tiv_vax = 11.17,
vfc_vax = 0,
priv_reim_vax = 20,
priv_reim_admin = 12,
vfc_reim_admin = 6.50,
vrc_reim_vax = 0,
vfc = 4827,
private = 1023,
priv_percent_laiv = 92.86694,
vfc_percent_laiv = 92.86694,
vfc_suc = 82,
priv_suc = 50){
# how much does medicaid cost
medicaid_cost <- vfc * (vfc_vax + admin)
# how much does private cost
private_laiv_cost <- (laiv_vax + admin) *(priv_percent_laiv*.01) * private
private_tiv_cost <- (tiv_vax + admin) * (1- (priv_percent_laiv *.01)) *private
private_cost <- private_laiv_cost + private_tiv_cost
#how much does medicaid make
medicaid_rev <- (vfc_reim_admin + vfc_vax) * vfc * (0.01* vfc_suc)
#how much does private make
private_rev <- ( priv_reim_admin + priv_reim_vax ) * private * (0.01 * priv_suc)
# What's the total revenue / loss
total <- medicaid_rev + private_rev - medicaid_cost - private_cost
# return
total
}
# Now make some calculation
denver()
denver(vfc_suc = 90,
priv_suc = 80)
#####
denver()
denver(private = 25, vfc = 75)
x <- vector(length = 100, mode = "numeric")
for (i in 1:100){
x[i] <- denver(vfc_suc = i,
priv_suc = i)
}
barplot(x, names.arg = 1:100,
xlab = "Percent reimbursement",
ylab = "Revenue /loss")
plot(1:100, x)
plot(1:100, x,
ylim = c(-160000, 160000))
abline(h = 0, col = "red")
for (i in 1:100){
x[i] <- denver(admin = i)
}
barplot(x)
barplot(x, names.arg = x)
barplot(x, names.arg = 1:100)
denver(admin = 8, vfc_suc = 90, priv_suc = 87)
denver(admin = 8, vfc_suc = 90, priv_suc = 95)
denver(admin = 8, vfc_suc = 95, priv_suc = 95)
denver(admin = 6.50, vfc_suc = 95, priv_suc = 95)
denver(admin = 7, vfc_suc = 95, priv_suc = 95)
denver(admin = 7, vfc_suc = 93, priv_suc = 95)
denver(admin = 7, vfc_suc = 90, priv_suc = 90)
denver(admin = 6, vfc_suc = 90, priv_suc = 90)
denver(admin = 6.8, vfc_suc = 90, priv_suc = 90)
denver(admin = 6.78, vfc_suc = 90, priv_suc = 90)
denver(admin = 6.90, vfc_suc = 90, priv_suc = 90)
<html>
<head>
library(leaflet)
library(RColorBrewer)
library(maps)
library(ggplot2)
library(rgdal)
library(leafletR)
library(rgeos) #for simplification
library(sp)
library(ggmap)
require(shiny)
require(rCharts)
#####
# READ IN GEOCODED SCHOOL DATA
#####
schools <- read.csv("schools.csv")
pedLevels <- c(5,20,40,60,80)
directCosts <- c(203,111,49,28,21)
medicaidDirectCosts <- directCosts*.16
nonMedicaidDirectCosts <- directCosts - medicaidDirectCosts
medicaidDirectCostsFed <- medicaidDirectCosts*.5
medicaidDirectCostsFl <- medicaidDirectCosts*.5
plot(pedLevels, medicaidDirectCosts,
xlim=c(0,80), xlab="Pediatric immunization rate", ylab="Dollars (in millions)")
my4cols <- adjustcolor(c("darkred", "darkblue", "darkgreen"), alpha.f=0.5)
my4labels <- c("Direct Medicaid costs (paid by Florida)",
"Direct Medicaid costs (paid by federal government)",
"Direct non-Medicaid costs")
polygonFun <- function(time, poly1, poly2, poly3){
mm <- c(time, rev(time))
poly1a <- c(rep(0, length(time)), rev(poly1))
poly2a <- c(rep(0, length(time)), rev(poly2))
poly3a <- c(rep(0, length(time)), rev(poly3))
aa <- c(poly1, rev(poly1))
bb <- c(poly2+poly1, rev(poly1))
cc <- c(poly3+poly2+poly1, rev(poly2+poly1))
plot(time, poly1, xaxt="n", type="n", ylim=c(0,max(cc, na.rm=TRUE)),
xlab=("Pediatric immunization rate (%)"), ylab="Dollars (in millions)",
main="Reduction in annual direct costs (by pay source)")
axis(side=1, at=time, labels=time,
tick=FALSE, line=0, cex=0.6)
polygon(mm, poly1a, col=my4cols[1], border=NA)
polygon(mm, bb, col=my4cols[2], border=NA)
polygon(mm, cc, col=my4cols[3], border=NA)
legend(x="topright", fill=rev(my4cols),
legend=rev(my4labels),
border=FALSE, bty="n", cex=0.85)
abline(h=seq(0,200,25), col=adjustcolor("black", alpha.f=0.2))
abline(v=c(5,20,40,60,80), col=adjustcolor("black", alpha.f=0.2))
}
polygonFun(time= pedLevels,
poly1= medicaidDirectCostsFl,
poly2= medicaidDirectCostsFed,
poly3= nonMedicaidDirectCosts)
par(mar=c(4,5,2,1))
############### EXCLUDING PRIVATE
my4cols <- adjustcolor(c("darkred", "darkblue"), alpha.f=0.5)
my4labels <- c("Medicaid costs paid by Florida",
"Total Medicaid costs for Florida")
polygonFun <- function(time, poly1, poly2){
mm <- c(time, rev(time))
poly1a <- c(rep(0, length(time)), rev(poly1))
poly2a <- c(rep(0, length(time)), rev(poly2))
aa <- c(poly1, rev(poly1))
bb <- c(poly2+poly1, rev(poly1))
plot(time, poly1, xaxt="n", type="n", ylim=c(0,max(bb, na.rm=TRUE)),
xlab=("Pediatric immunization rate (%)"), ylab="Dollars (in millions)",
main="Reduction in annual Medicaid costs", cex.axis=1.6,
cex.lab=1.4)
axis(side=1, at=time, labels=time,
tick=FALSE, line=0, cex.axis=1.5)
polygon(mm, poly1a, col=my4cols[1], border=NA)
polygon(mm, bb, col=my4cols[2], border=NA)
legend(x="topright", fill=rev(my4cols),
legend=rev(my4labels),
border=FALSE, bty="n", cex=1.4)
abline(h=seq(0,200,5), col=adjustcolor("black", alpha.f=0.2))
abline(v=c(5,20,40,60,80), col=adjustcolor("black", alpha.f=0.2))
}
polygonFun(time= pedLevels,
poly1= medicaidDirectCostsFl,
poly2= medicaidDirectCostsFed)
library(rgdal)
zip <- readOGR("C:/Users/BrewJR/Desktop/e_drive/zipcode/national_zip",
"tl_2013_us_zcta510")
plot(zip)
plot(zip)
head(zip@data)
zip$others <- NA
x<- vector(mode="character")
x
library(rgdal)
zip <- readOGR("C:/Users/BrewJR/Desktop/e_drive/zipcode/national_zip",
"tl_2013_us_zcta510")
# Loop to get the zip codes for each place
zip$others <- NA
library(sp)
head(zip@data)
centroids(zip)
zip@centroids
coordinates(zip)
?paste
paste("joe", "ben", "hello")
paste(c("joe", "ben", "hello"))
paste(c("joe", "ben", "hello"), sep = NULL)
paste(c("joe", "ben", "hello"), sep = ",", collapse = TRUE)
paste(c("joe", "ben", "hello"), sep = ",")
paste(c("joe", "ben", "hello"), collapse = ",")
for (i in 1:10){
#for (i in 1:nrow(zip)){
# home zip
zip1 <- as.character(zip$ZCTA5CE10)[i]
coords1 <- coordinates(zip)[i,]
# away zip
zip2 <- as.character(zip$ZCTA5CE10)
# over statement
a <- over(coords1, polygons(zip))
# true polygons
zip$others[i] <- paste0(zip2[a], collapse = ",")
}
coords1 <- coordinates(zip)[1,]
coords1
?over
str(coordinates(zip))
zip@coords
#########################################
# READ AND CLEAN NATIONAL IMMUNIZATION DATA
#########################################
### PACKAGES
library(gdata)
### SETWD
setwd("C:/Users/BrewJR/Documents/healthy_schools")
### READ IN NATIONAL IMMUNIZATION RATE DATA
national <- read.xls("national_flu_vaccine_coverage_201314.xlsx",
sheet = "6m-17y",
skip = 3,
stringsAsFactors = FALSE)
### CLEAN UP A BIT
# fix column names
names(national) <- c("group", "region", "area", "month",
"val", "ci")
#(keeping only month of december)
national <- national[which(national$month == "October"),]
# eliminate unecessary columns
national <- national[,c("area", "val", "ci")]
# clean up val and ci
national$val <- as.numeric(as.character(national$val))
national$ci <- as.numeric(as.character(gsub("[(]|Â±|[)]", "", national$ci)))
# add state boolean
national$state <- vector(mode = "character",
length = nrow(national))
national$state <- ifelse(
national$area %in% c("United States", "District of Columbia") |
grepl("Region", national$area),
FALSE,
TRUE)
# sort by val
national <- national[order(national$val),]
#########################################
# PLOT EACH STATE TOGETHER
#########################################
# subset to only include states
states <- national[which(national$state),]
# assign color vector
my_colors <- colorRampPalette(c("darkorange", "blue"))(nrow(states))
bp <- barplot(states$val,
col = my_colors,
border = FALSE,
names.arg = states$area,
las = 3,
cex.names = 0.5,
ylim = c(0, max(states$val, na.rm = TRUE) * 1.1))
# # add line for florida
# abline(v= bp[,1][which(states$area == "Florida")],
#        lty = 2,
#        col = adjustcolor("black", alpha.f = 0.4))
# add text for rate
text(x = bp[,1],
y = states$val,
pos = 3,
labels = states$val,
cex = 0.4,
col = adjustcolor("black", alpha.f = 0.6))
# add box
box("plot")
# add US average
us_avg <- national$val[which(national$area == "United States")]
abline(h = us_avg,
col = adjustcolor("darkblue", alpha.f = 0.4),
lwd = 2)
# label us average
text(x = 5,
y = us_avg,
pos = 3,
labels = paste0("U.S. average: ", us_avg, "%"))
# add florida text
text(x = bp[,1][which(states$area == "Florida")],
y = 10,
srt = 90,
labels = "Florida",
col = adjustcolor("black", alpha.f = 0.7))
#########################################
# MAP EACH STATE
#########################################
# read in and clean up us map
library(maps)
us <- map("state")
us$original_names <- us$names
us$names <- sub(":.*", "", us$names)
# assign "names" column to states
states$names <- tolower(states$area)
# bring data into us map
us$val <- vector(mode = "numeric",
length = length(us$names))
for (i in 1:length(us$names)){
a <- adist(us$names[i],
states$names)
# get the one with the least differences
ind <- which.min(a)
# get the name from std
best_name <- states$names[ind]
# assign val
us$val[i] <- states$val[which(states$names == best_name)][1]
}
# create color palette
my_colors <- colorRampPalette(c( "darkorange", "blue"))(10)
# assign color vector to us
us$temp <- vector(mode = "character",
length = length(us$names))
us$temp <- cut(us$val,
breaks = 10)
us$color <- vector(mode = "character",
length = length(us$names))
us$color <- my_colors[as.numeric(us$temp)]
map("state", fill = TRUE, col = us$color, border = "darkgrey")
legend(x = "bottomleft",
fill = my_colors,
legend = levels(us$temp),
cex = 0.5,
y.intersp = 1,
ncol = 5,
border="darkgrey",
bty = "n",
title = "2013-14 pediatric immunization (October)")
# Add vals
main_polys <- which(!grepl(":", us$original_names))
map.text("state", exact = FALSE, labels = as.character(us$val), cex = 0.6,
add = TRUE, move = FALSE, col = adjustcolor("black", alpha.f = 0.6))
#########################################
# WHAT WOULD HAPPEN IF WE WENT FROM 30 TO 40%?
#########################################
# Source weycker calculations
source("weycker.R")
# five functions:
# hospitalizations, cases, deaths, indirect_costs, direct_costs
# Function to make big numbers easier to read
millionize <- function(number){
if(number > 1000000){
number <- paste0(round(number / 1000000, digits = 1), " million")
} else{
number <- round(number, digits = 0)
}
return(number)
}
# Write function to visualize different kinds of costs (takes 1 of 5 functions)
visualize <- function(fun,
current_imm = 29,
new_imm = NULL,
my_colors = colorRampPalette(c("darkorange", "blue"))(100)){
# Calculate values
x <- vector(mode = "numeric", length = 100)
for (i in 1:100){
x[i] <- fun(i)
}
# Barplot values
bp <- barplot(x,
border = NA,
col = my_colors,
names.arg = 1:100,
cex.names = 0.5,
xlab = "Pediatric immunization rate")
# Label
text(x = bp[,1][current_imm],
y = x[current_imm]*1.1,
labels = millionize(x[current_imm]),
pos = 3)
# new immunization
if(!is.null(new_imm)){
text(x = bp[,1][new_imm],
y = x[new_imm]*1.1,
labels = millionize(x[new_imm]),
pos = 3,
cex = 0.7)
# difference
text(x = bp[,1][60],
y = max(x, na.rm = TRUE) * 0.5,
labels = paste0("Reduction of ", millionize(x[current_imm] - x[max(new_imm)])),
cex = 1.5)
}
box("plot")
}
# turn off scientific notation
options(scipen=999)
# Direct costs
visualize(fun = direct_costs, new_imm = 50)
title(main = "Direct costs", cex.main = 1)
#hospitalizations
visualize(fun = indirect_costs, new_imm = c(40, 50, 60, 70))
title(main = "Indirect costs", cex.main = 1)
#cases
visualize(fun = cases, new_imm = c(40, 50, 60, 70))
title(main = "Cases", cex.main = 1)
#hospitalizations
visualize(fun = hospitalizations, new_imm = c(40, 50, 60, 70))
title(main = "Hospitalizations", cex.main = 1)
#deaths
visualize(fun = deaths, new_imm = c(40, 50, 60, 70))
title(main = "Deaths", cex.main = 1)
#deaths
visualize(fun = medicaid_costs, new_imm = c(40, 50, 60, 70))
title(main = "Medicaid costs", cex.main = 1)
getwd()
source("weycker.R")
